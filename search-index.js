var searchIndex = {};
searchIndex['cosmo'] = {"items":[[0,"","cosmo","",null,null],[0,"collection","","Thread-safe, high performance data structures.",null,null],[3,"SpscConcurrentQueue","cosmo::collection","A bounded queue allowing a single producer and a single consumer.",null,null],[3,"SpmcConcurrentQueue","","A bounded queue allowing a single producer and multiple consumers.",null,null],[11,"with_capacity","","Creates a single producer single consumer queue with the specified\ncapacity.",0,{"inputs":[{"name":"spscconcurrentqueue"},{"name":"usize"}],"output":{"name":"arc"}}],[11,"peek","","Tries to peek a value from the queue. The value needs to be Clone\nsince the value in the queue can't be moved out.",0,{"inputs":[{"name":"spscconcurrentqueue"}],"output":{"name":"option"}}],[11,"offer","","Puts an item in the queue. This method only reads and modifies the\n`tail` index, thus avoiding cache line ping-ponging.",0,{"inputs":[{"name":"spscconcurrentqueue"},{"name":"t"}],"output":{"name":"option"}}],[11,"poll","","Takes an item from the queue. This method only reads and modifies the\n`head` index.",0,{"inputs":[{"name":"spscconcurrentqueue"}],"output":{"name":"option"}}],[11,"capacity","","Returns the capacity of the queue.",0,{"inputs":[{"name":"spscconcurrentqueue"}],"output":{"name":"usize"}}],[11,"size","","Returns how many items are in the queue.",0,{"inputs":[{"name":"spscconcurrentqueue"}],"output":{"name":"usize"}}],[11,"with_capacity","","Creates a single producer multiple consumer queue with the specified\ncapacity.",1,{"inputs":[{"name":"spmcconcurrentqueue"},{"name":"usize"}],"output":{"name":"arc"}}],[11,"offer","","Puts an item in the queue. This method only reads and modifies the\n`tail` index, thus avoiding cache line ping-ponging.",1,{"inputs":[{"name":"spmcconcurrentqueue"},{"name":"t"}],"output":{"name":"option"}}],[11,"poll","","Takes an item from the queue. This method uses the `head` index to\nsynchronize multiple consumers. The tail position is read from the\n`tail_cache` to avoid cache line ping-ponging between the producer \nand the consumers.",1,{"inputs":[{"name":"spmcconcurrentqueue"}],"output":{"name":"option"}}],[11,"capacity","","Returns the capacity of the queue.",1,{"inputs":[{"name":"spmcconcurrentqueue"}],"output":{"name":"usize"}}],[11,"size","","Returns how many items are in the queue.",1,{"inputs":[{"name":"spmcconcurrentqueue"}],"output":{"name":"usize"}}],[8,"ConcurrentQueue","","Trait that concurrent, non-blocking queues implement.",null,null],[10,"offer","","Tries to put a value onto the queue.",2,{"inputs":[{"name":"concurrentqueue"},{"name":"t"}],"output":{"name":"option"}}],[10,"poll","","Tries to remove a value from the queue.",2,{"inputs":[{"name":"concurrentqueue"}],"output":{"name":"option"}}],[10,"capacity","","Returns the capacity of the queue.",2,{"inputs":[{"name":"concurrentqueue"}],"output":{"name":"usize"}}],[10,"size","","Returns how many items are in the queue.",2,{"inputs":[{"name":"concurrentqueue"}],"output":{"name":"usize"}}],[11,"is_empty","","Tells whether the queue is empty or not.",2,{"inputs":[{"name":"concurrentqueue"}],"output":{"name":"bool"}}],[11,"is_full","","Tells whether the queue is full or not.",2,{"inputs":[{"name":"concurrentqueue"}],"output":{"name":"bool"}}],[11,"is_empty","","Tells whether the queue is empty or not.",2,{"inputs":[{"name":"concurrentqueue"}],"output":{"name":"bool"}}],[11,"is_full","","Tells whether the queue is full or not.",2,{"inputs":[{"name":"concurrentqueue"}],"output":{"name":"bool"}}]],"paths":[[3,"SpscConcurrentQueue"],[3,"SpmcConcurrentQueue"],[8,"ConcurrentQueue"]]};
initSearch(searchIndex);
